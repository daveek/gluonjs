{"version":3,"sources":["gluon.js"],"names":["render","html","GluonElement","HTMLElement","constructor","attachShadow","mode","Promise","resolve","then","createIdCache","is","TAG","camelToKebab","name","NEEDSRENDER","template","shadowRoot","replace","toLowerCase","Symbol","$","querySelectorAll","forEach","id"],"mappings":"AAAA,OAASA,MAAT,CAAiBC,IAAjB,KAA6B,yBAA7B,CAEA,OAASA,IAAT,EAEA,MAAO,MAAMC,aAAN,QAA2BC,YAAY,CAC5CC,aAAc,CACZ,OADY,CAER,YAAc,KAFN,GAGV,KAAKC,YAAL,CAAkB,CAAEC,KAAM,MAAR,CAAlB,CAHU,CAIV,KAAKN,MAAL,EAJU,CAKVO,QAAQC,OAAR,GAAkBC,IAAlB,CAAuB,IAAM,CAC3BC,cAAc,IAAd,CACD,CAFD,CALU,CASb,CACD,UAAWC,GAAX,EAAgB,CACd,MAAO,MAAKC,GAAL,IAAc,KAAKA,GAAL,EAAYC,aAAa,KAAKC,IAAlB,CAA1B,CACR,CACDd,QAAS,CACF,KAAKe,WAAL,CADE,GAEL,KAAKA,WAAL,IAFK,CAGLR,QAAQC,OAAR,GAAkBC,IAAlB,CAAuB,IAAM,CAC3B,KAAKM,WAAL,IAD2B,CAE3Bf,OAAO,KAAKgB,QAAZ,CAAsB,KAAKC,UAA3B,CACD,CAHD,CAHK,CAQR,CAtB2C,CAyB9C,KAAMJ,cAAe,WAAgB,CACnC,MAAO,GAAMK,OAAN,CAAc,iCAAd,CAAiD,WAAjD,EAA8DC,WAA9D,EACR,CAFD,CAIMP,IAAMQ,OAAO,KAAP,CAJZ,CAKML,YAAcK,OAAO,aAAP,CALpB,CAOMV,cAAgB,WAAkB,CACtC,EAAQW,CAAR,GADsC,CAEtC,EAAQJ,UAAR,CAAmBK,gBAAnB,CAAoC,MAApC,EAA4CC,OAA5C,CAAoD,KAAM,CACxD,EAAQF,CAAR,CAAU,EAAGG,EAAb,GACD,CAFD,CAGD,CAZD","file":"gluon.js","sourcesContent":["import { render, html } from '../lit-html/lit-html.js';\n\nexport { html };\n\nexport class GluonElement extends HTMLElement {\n  constructor() {\n    super();\n    if ('template' in this) {\n      this.attachShadow({ mode: 'open' });\n      this.render();\n      Promise.resolve().then(() => {\n        createIdCache(this);\n      });\n    }\n  }\n  static get is() {\n    return this[TAG] || (this[TAG] = camelToKebab(this.name));\n  }\n  render() {\n    if (!this[NEEDSRENDER]) {\n      this[NEEDSRENDER] = true;\n      Promise.resolve().then(() => {\n        this[NEEDSRENDER] = false;\n        render(this.template, this.shadowRoot);\n      });\n    }\n  }\n}\n\nconst camelToKebab = function(camel) {\n  return camel.replace(/([a-z])([A-Z])|(.)([A-Z][a-z])/g, '$1$3-$2$4').toLowerCase();\n};\n\nconst TAG = Symbol('tag');\nconst NEEDSRENDER = Symbol('needsRender');\n\nconst createIdCache = function(element) {\n  element.$ = {};\n  element.shadowRoot.querySelectorAll('[id]').forEach(el => {\n    element.$[el.id] = el;\n  });\n};\n"]}