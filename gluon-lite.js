const e=(e,...t)=>e.map((e,s)=>e+(void 0!=t[s]&&t[s].toString()||"")).join(""),t=(e,t)=>t.innerHTML=e,s=Symbol("tag"),a=Symbol("needsRender"),o=Symbol("shadyTemplate"),n=e=>{if(window.ShadyCSS){const t=e.constructor;void 0===t[o]&&(t[o]=document.createElement("template"),t[o].innerHTML=e.shadowRoot.innerHTML,ShadyCSS.prepareTemplate(t[o],t.is)),ShadyCSS.styleElement(e)}},i=e=>e.replace(/([a-z])([A-Z])|(.)([A-Z][a-z])/g,"$1$3-$2$4").toLowerCase(),h=e=>{e.$={},e.shadowRoot.querySelectorAll("[id]").forEach(t=>{e.$[t.id]=t})};class r extends HTMLElement{static get is(){return this.hasOwnProperty(s)&&this[s]||(this[s]=i(this.name))}connectedCallback(){"template"in this&&(this.attachShadow({mode:"open"}),this.render({sync:!0}),h(this))}async render({sync:e=!1}={}){this[a]=!0,e||await 0,this[a]&&(this[a]=!1,t(this.template,this.shadowRoot),n(this))}}export{r as GluonElement,e as html};